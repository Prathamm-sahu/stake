// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  username           String              @unique
  password           String?
  image              String?
  balance            Int                 @default(0)
  onRampTransactions OnRampTransaction[]
  gameTransactions   GameTransaction[]
  accounts           Account[]
  sessions           Session[]
}

model OnRampTransaction {
  id        String       @id @default(cuid())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
}

model GameTransaction {
  id         String   @id @default(cuid())
  status     Boolean
  betAmount  Int
  multiplier Int
  payout     Int
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
